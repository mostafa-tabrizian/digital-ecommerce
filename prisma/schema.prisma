generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  role           Role      @default(CLIENT)
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  phoneNumber    String?
  mobileNumber   String?   @unique
  mobileVerified Boolean   @default(false)
  melliCode      String?   @unique
  image          String?
  address        String?
  blocked        Boolean   @default(false)
  blockedFor     String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastLogin      DateTime  @default(now())
  orders         Order[]
  password       String    @default("")
}

enum Role {
  CLIENT
  ADMIN
}

model Order {
  id           String      @id @default(cuid())
  status       Status      @default(PENDING)
  createdAt    DateTime    @default(now())
  client       User?       @relation(fields: [clientId], references: [id], onDelete: SetNull)
  clientId     String?
  price        Int
  discount     Int
  payment      Payment
  shippingCost Int
  trackingCode String?
  items        OrderItem[]
}

enum Status {
  CANCELED
  POSTED
  PREPARING
  PENDING
}

enum Payment {
  DEPOSIT
  CASH
}

model OrderItem {
  id       String           @id @default(cuid())
  order    Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  String
  item     ProductLocation? @relation(fields: [itemId], references: [id], onDelete: SetNull)
  itemId   String?
  price    Int
  discount Int
  quantity Int
}

model ProductLocation {
  id        String      @id @default(cuid())
  public    Boolean     @default(true)
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  color     Color?      @relation(fields: [colorId], references: [id], onDelete: SetNull)
  colorId   String?      @unique
  size      Size?       @relation(fields: [sizeId], references: [id], onDelete: SetNull)
  sizeId    String?      @unique
  quantity  Int         @default(0)
  price     Int
  discount  Int         @default(0)
  orderItem OrderItem[]
}

model Brand {
  id       String    @id @default(cuid())
  name     String
  products Product[]
}

model Product {
  id              String            @id @default(cuid())
  title           String
  brand           Brand?            @relation(fields: [brandId], references: [id], onDelete: SetNull)
  brandId         String?
  description     String?
  productLocation ProductLocation[]
  gallery         Image[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Image {
  id        String   @id @default(cuid())
  src       String   @default("/product/")
  alt       String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Color {
  id              String           @id @default(cuid())
  color           String
  productLocation ProductLocation?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Size {
  id              String           @id @default(cuid())
  size            Int
  productLocation ProductLocation?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Coupon {
  id        String     @id @default(cuid())
  code      String     @unique
  type      CouponType @default(PERCENTAGE)
  value     Int
  quantity  Int        @default(1)
  createdAt DateTime   @default(now())
  expiresAt DateTime?
}

enum CouponType {
  PERCENTAGE
  PRICE
}
